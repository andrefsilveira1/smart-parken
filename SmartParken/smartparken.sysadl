Model SysADLModel ; package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } dimension Data unit Segundos { dimension = Data } value type DataType { unit = Segundos dimension = Data } value type SegundosDataType extends DataType { unit = Segundos dimension = Data } enum ComandoCancela { Abrir , Fechar } datatype Comandos { attributes : Cancela : ComandoCancela ; } dimension Dinheiro unit Reais { dimension = Dinheiro } value type DinheiroType { dimension = Dinheiro } value type ReaisDinheiroType extends DinheiroType { unit = Reais dimension = Dinheiro } enum EstadoVaga { Ocupada , Livre } enum TipoVaga { Simples , Coberta , Preferencial , Acessivel } enum TipoPagamento { Debito , Credito , Pix } datatype ExitData { attributes : Placa : String ; Pago : Boolean ; } datatype ControlAccessUnityData { attributes : ID : String ; Placa : String ; HoraEntrada : DataType ; } datatype VagaData { attributes : Estado : EstadoVaga ; ID : String ; Tipo : TipoVaga ; } datatype DisplayUnityData { attributes : VagaInfo : VagaData ; } datatype DisplayData { attributes : VagaSimples : Int ; VagaCoberta : Int ; VagaPreferencial : Int ; VagaAcessivel : Int ; } datatype LeitorComponentData { attributes : Placa : String ; Hora : DataType ; } datatype PaymentComponentData { attributes : Placa : String ; TempoPermanencia : SegundosDataType ; TipoPagamento : TipoPagamento ; } datatype OutPaymentComponentData { attributes : Placa : String ; Preco : ReaisDinheiroType ; Pago : Boolean ; } datatype ExitUnityControl { attributes : Placa : String ; Pago : Boolean ; } } Requirement RFControledeVagasDisponiveis ( 2 ) { text = "" satisfied by SPSystemComponents.DisplayVagasGeral ; derive RFControleDeEntradaeSaida ; Requirement RFVagasDoSetor ( 2.1 ) { satisfied by SPSystemComponents.DisplayVagasSetor ; } } Requirement RFEquipamentosdeEntradaeSaida ( 7 ) { text = ^text satisfied by SPSystemComponents.Cancela ; derive RFControleDeEntradaeSaida ; } Requirement RFEmergencia ( 6 ) { text = ^text satisfied by SPSystemComponents.UnidadeControleAcesso ; derive RFControleDeEntradaeSaida ; } Requirement RFControledeAcesso ( 8 ) { } Requirement RFControleDeEntradaeSaida ( 1 ) { text = ^text satisfied by SPSystemComponents.UnidadeControleAcesso ; Requirement RFControleDeSaida ( 1.1 ) { text = ^text satisfied by SPSystemComponents.ReceptorTicket ; } Requirement RFControleDeEntrada ( 1.2 ) { text = ^text satisfied by SPSystemComponents.EmissorTicket ; } } Requirement RFIdentificacaoEAutorizacaoDeVeiculos ( 3 ) { derive RFControleDeEntradaeSaida ; Requirement RFIdentificacao ( 3.2 ) { satisfied by SPSystemComponents.DetectorPlaca ; } Requirement RFAutorizacao ( 3.1 ) { satisfied by SPSystemComponents.ReceptorTicket ; } }  Requirement RFCalculoAutomatico ( 5 ) { satisfied by SPSystemComponents.UnidadePagamento ; derive RFTerminaisdePagamento ; } package SPSystemComponents { import SPSystemConnectors ; import SysADL.types ; import SPSystemPorts ;
	component def UnidadeControleCentral { ports :  configuration { components : UnidadeControleAcesso : UnidadeControleAcesso ; UnidadeControleDisplay : UnidadeControleDisplay ; UnidadePagamento : UnidadePagamento ; } }
	component def UnidadeControleDisplay { ports :  configuration { components : DisplayVagasGeral : DisplayVagasGeral ; } }
	component def UnidadePagamento { configuration { components : PlataformaPagamento : PlataformaPagamento ; TotemPagamento : TotemPagamento ; } }
	component def UnidadeControleAcesso { ports :   configuration { components : UnidadeControleEntrada : UnidadeControleEntrada ; UnidadeControleSaida : UnidadeControleSaida ; } }
	component def SensorPresenca { ports :  }
	component def TotemPagamento { ports :   }
	component def Cancela { ports :  }
	component def DisplayVagasGeral { configuration { components : DisplayVagasSetor : DisplayVagasSetor ; } }
	component def DisplayVagasSetor { configuration { components : SensorPresenca : SensorPresenca ; } }
	component def DetectorPlaca { ports :  }
	component def EmissorTicket { }
	component def ReceptorTicket { }
	component def PlataformaPagamento { } component def SPSystem { configuration { components :           UnidadeControleCentral : UnidadeControleCentral { using ports : newPort : UnidadeControleCentralIPT ; } } }
	component def UnidadeControleSaida { ports :   configuration { components : DetectorPlaca : DetectorPlaca { using ports : newPort : LeitorComponentOTP ; } ReceptorTicket : ReceptorTicket ; Cancela : Cancela { using ports : newPort : CancelaIPT ; } } }
	component def UnidadeControleEntrada { configuration { components : Cancela : Cancela { using ports : newPort : CancelaIPT ; } DetectorPlaca : DetectorPlaca { using ports : newPort : LeitorComponentOTP ; } EmissorTicket : EmissorTicket ; } } } package SPSystemConnectors { import SPSystemPorts ; connector def SensorToVaga { participants : ~ S_O : SensorOPT ; ~ V_I : VagaIPT ; flows :   Boolean from S_O to V_I } connector def VagaToDisplayUnity { participants : ~ V_O : VagaOTP ; ~ D_I : DisplayUnityIPT ; flows :   VagaData from V_O to D_I } connector def LeitorToAccessUnity { participants : ~ L_O : LeitorComponentOTP ; ~ CAU_I : ControlAccessUnityIPT ; flows :   LeitorComponentData from L_O to CAU_I } connector def AccessToCancela { participants : ~ CAU_O : ControlAccessUnityOTP ; ~ C_I : CancelaIPT ; flows :   ComandoCancela from CAU_O to C_I } connector def PaymentToPayment { participants : ~ PC_I : PaymentComponentIPT ; ~ PC_O : PaymentComponentOTP ; flows :   PaymentComponentData from PC_I to PC_O } connector def LeitorToExitControl { participants : ~ L_I : LeitorComponentOTP ; ~ EU_I : ExitUnityIPT ; flows :   LeitorComponentData from L_I to EU_I } connector def ExitToCancela { participants : ~ EU_O : ExitUnityOTP ; ~ C_I : CancelaIPT ; flows :   Comandos from EU_O to C_I } connector def PaymentToControleCentral { participants : ~ UCC_I : UnidadeControleCentralIPT ; ~ PC_O : PaymentComponentOTP ; flows : OutPaymentComponentData from PC_O to UCC_I } } package SPSystemPorts { import SysADL.types ; port def CancelaIPT { flow in ComandoCancela } port def CancelaOTP { flow out ComandoCancela } port def VagaIPT { flow in EstadoVaga } port def VagaOTP { flow out VagaData } port def SensorIPT { flow in Boolean } port def SensorOPT { flow out Boolean } port def DisplayIPT { flow in DisplayData } port def ControlAccessUnityIPT { flow in ControlAccessUnityData } port def ControlAccessUnityOTP { flow out ComandoCancela } port def DisplayUnityIPT { flow in DisplayUnityData } port def DisplayUnityOTP { flow out DisplayData } port def LeitorComponentOTP { flow out LeitorComponentData } port def PaymentComponentIPT { flow in PaymentComponentData } port def PaymentComponentOTP { flow out OutPaymentComponentData } port def ExitUnityIPT { flow in ExitData } port def ExitUnityOTP { flow out Comandos } port def UnidadeControleCentralIPT { flow in OutPaymentComponentData } } Requirement RFTerminaisdePagamento ( 4 ) { satisfied by SPSystemComponents.UnidadePagamento ; derive RFIdentificacaoEAutorizacaoDeVeiculos ; } Requirement RNFSuportarDiferentesCapacidades ( 10 ) { satisfied by SPSystemComponents.UnidadeControleAcesso ; } Requirement RNFFormasPagamento ( 11 ) { satisfied by SPSystemComponents.PlataformaPagamento , SPSystemComponents.TotemPagamento ; } Requirement RNFIntegracaoPagamento ( 12 ) { satisfied by SPSystemComponents.UnidadePagamento ; } Requirement RNFAtualizacao ( 13 ) { } Requirement RNFMinFila ( 14 ) { satisfied by SPSystemComponents.DetectorPlaca ; } Requirement RNFFuncionamento24x7 ( 15 ) { satisfied by SPSystemComponents.SensorPresenca , SPSystemComponents.DisplayVagasGeral , SPSystemComponents.UnidadeControleAcesso ; } Requirement RNFSegurancaDados ( 16 ) { } Requirement RNFToleranciaFalhas ( 17 ) { }
