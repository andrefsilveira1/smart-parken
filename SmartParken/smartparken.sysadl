Model SysADLModel ; package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } dimension Data unit Segundos { dimension = Data } value type DataType { unit = Segundos dimension = Data } value type SegundosDataType extends DataType { unit = Segundos dimension = Data } enum ComandoCancela { Abrir , Fechar } datatype Comandos { attributes : Cancela : ComandoCancela ; } dimension Dinheiro unit Reais { dimension = Dinheiro } value type DinheiroType { dimension = Dinheiro } value type ReaisDinheiroType extends DinheiroType { unit = Reais dimension = Dinheiro } enum EstadoVaga { Ocupada , Livre } enum TipoVaga { Simples , Coberta , Preferencial , Acessivel } enum TipoPagamento { Debito , Credito , Pix } datatype ExitData { attributes : Placa : String ; Pago : Boolean ; } datatype ControlAccessUnityData { attributes : ID : String ; Placa : String ; HoraEntrada : DataType ; } datatype VagaData { attributes : Estado : EstadoVaga ; ID : String ; Tipo : TipoVaga ; } datatype DisplayUnityData { attributes : VagaInfo : VagaData ; } datatype DisplayData { attributes : VagaSimples : Int ; VagaCoberta : Int ; VagaPreferencial : Int ; VagaAcessivel : Int ; } datatype LeitorComponentData { attributes : Placa : String ; Hora : DataType ; } datatype PaymentComponentData { attributes : Placa : String ; TempoPermanencia : SegundosDataType ; TipoPagamento : TipoPagamento ; } datatype OutPaymentComponentData { attributes : Placa : String ; Preco : ReaisDinheiroType ; Pago : Boolean ; } datatype ExitUnityControl { attributes : Placa : String ; Pago : Boolean ; } } Requirement RFControledeVagasDisponiveis ( 2 ) { text = "O sistema deve permitir associar o veiculo a sua placa" derive RFControleDeEntradaeSaida ; Requirement RFVagasDoSetor ( 2.1 ) { } } Requirement RFEquipamentosdeEntradaeSaida ( 7 ) { text = ^text derive RFControleDeEntradaeSaida ; } Requirement RFEmergencia ( 6 ) { text = ^text derive RFControleDeEntradaeSaida ; } Requirement RFControledeAcesso ( 8 ) { } Requirement RFControleDeEntradaeSaida ( 1 ) { text = ^text Requirement RFControleDeSaida ( 1.1 ) { text = ^text } Requirement RFControleDeEntrada ( 1.2 ) { text = ^text } } Requirement RFIdentificacaoEAutorizacaoDeVeiculos ( 3 ) { derive RFControleDeEntradaeSaida ; Requirement RFIdentificacao ( 3.2 ) { } Requirement RFAutorizacao ( 3.1 ) { } }  Requirement RFCalculoAutomatico ( 5 ) { derive RFTerminaisdePagamento ; } package SPSystemComponents { import SPSystemConnectors ; import SysADL.types ; import SPSystemPorts ;
	component def UnidadeControleCentral { ports : newPort : UnidadeControleCentralIPT ; }
	component def UnidadeControleDisplay { ports : newPort : DisplayUnityIPT ; }
	component def UnidadePagamento { }
	component def UnidadeControleAcesso { ports : newPort : ControlAccessUnityIPT ; newPort : ControlAccessUnityOTP ; }
	component def SensorPresenca { ports : newPort : SensorOPT ; }
	component def TotemPagamento { ports : newPort : PaymentComponentIPT ; newPort : PaymentComponentOTP ; }
	component def Cancela { ports : newPort : CancelaIPT ; }
	component def DisplayVagasGeral { }
	component def DisplayVagasSetor { }
	component def DetectorPlaca { ports : newPort : LeitorComponentOTP ; }
	component def EmissorTicket { }
	component def ReceptorTicket { }
	component def PlataformaPagamento { } component def SPSystem { configuration { components : DetectorPlaca : DetectorPlaca { using ports : newPort : LeitorComponentOTP ; } Cancela : Cancela { using ports : newPort : CancelaIPT ; } UnidadeControleAcesso : UnidadeControleAcesso { using ports : newPort : ControlAccessUnityIPT ; newPort : ControlAccessUnityOTP ; } SensorPresenca : SensorPresenca { using ports : newPort : SensorOPT ; } UnidadeControleDisplay : UnidadeControleDisplay { using ports : newPort : DisplayUnityIPT ; } TotemPagamento : TotemPagamento { using ports : newPort : PaymentComponentIPT ; newPort : PaymentComponentOTP ; } DetectorPlaca : DetectorPlaca { using ports : newPort : LeitorComponentOTP ; } UnidadeControleSaida : UnidadeControleSaida { using ports : newPort : ExitUnityIPT ; newPort : ExitUnityOTP ; } Cancela : Cancela { using ports : newPort : CancelaIPT ; } UnidadeControleCentral : UnidadeControleCentral { using ports : newPort : UnidadeControleCentralIPT ; } } }
	component def UnidadeControleSaida { ports : newPort : ExitUnityIPT ; newPort : ExitUnityOTP ; } } package SPSystemConnectors { import SPSystemPorts ; connector def SensorToVaga { participants : ~ newPort : SensorOPT ; ~ newPort : VagaIPT ; flows :  Boolean from newPort to newPort } connector def VagaToDisplayUnity { participants : ~ newPort : VagaOTP ; ~ newPort : DisplayUnityIPT ; flows :  VagaData from newPort to newPort } connector def LeitorToAccessUnity { participants : ~ newPort : LeitorComponentOTP ; ~ newPort : ControlAccessUnityIPT ; flows :  LeitorComponentData from newPort to newPort } connector def AccessToCancela { participants : ~ newPort : ControlAccessUnityOTP ; ~ newPort : CancelaIPT ; flows :  ControlAccessUnityData from newPort to newPort } connector def PaymentToPayment { participants : ~ newPort : PaymentComponentIPT ; ~ newPort : PaymentComponentOTP ; flows :  PaymentComponentData from newPort to newPort } connector def LeitorToExitControl { participants : ~ newPort : LeitorComponentOTP ; ~ newPort : ExitUnityIPT ; flows :  LeitorComponentData from newPort to newPort } connector def ExitToCancela { participants : ~ newPort : ExitUnityOTP ; ~ newPort : CancelaIPT ; flows :  Comandos from newPort to newPort } connector def PaymentToControleCentral { participants : ~ newPort : UnidadeControleCentralIPT ; ~ newPort : PaymentComponentOTP ; } } package SPSystemPorts { import SysADL.types ; port def CancelaIPT { flow in ComandoCancela } port def CancelaOTP { flow out ComandoCancela } port def VagaIPT { flow in EstadoVaga } port def VagaOTP { flow out VagaData } port def SensorIPT { flow in Boolean } port def SensorOPT { flow out Boolean } port def DisplayIPT { flow in DisplayData } port def ControlAccessUnityIPT { flow in ControlAccessUnityData } port def ControlAccessUnityOTP { flow out ComandoCancela } port def DisplayUnityIPT { flow in DisplayUnityData } port def DisplayUnityOTP { flow out DisplayData } port def LeitorComponentOTP { flow out LeitorComponentData } port def PaymentComponentIPT { flow in PaymentComponentData } port def PaymentComponentOTP { flow out OutPaymentComponentData } port def ExitUnityIPT { flow in ExitData } port def ExitUnityOTP { flow out Comandos } port def UnidadeControleCentralIPT { flow in OutPaymentComponentData } } Requirement RFTerminaisdePagamento ( 4 ) { derive RFIdentificacaoEAutorizacaoDeVeiculos ; } Requirement RNFSuportarDiferentesCapacidades ( 10 ) { } Requirement RNFFormasPagamento ( 11 ) { } Requirement RNFIntegracaoPagamento ( 12 ) { } Requirement RNFAtualizacao ( 13 ) { } Requirement RNFMinFila ( 14 ) { } Requirement RNFFuncionamento24x7 ( 15 ) { } Requirement RNFSegurancaDados ( 16 ) { } Requirement RNFToleranciaFalhas ( 17 ) { }
