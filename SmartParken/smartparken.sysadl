Model SysADLModel ; package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } dimension Data unit Segundos { dimension = Data } value type DataType { unit = Segundos dimension = Data } value type SegundosDataType extends DataType { unit = Segundos dimension = Data } enum ComandoCancela { Abrir , Fechar } datatype Comandos { attributes : Cancela : ComandoCancela ; } dimension Dinheiro unit Reais { dimension = Dinheiro } value type DinheiroType { dimension = Dinheiro } value type ReaisType extends DinheiroType { unit = Reais dimension = Dinheiro } enum EstadoVaga { Ocupada , Livre } enum TipoVaga { Simples , Coberta , Preferencial , Acessivel } enum TipoPagamento { Debito , Credito , Pix } datatype InformacaoSaida { attributes : Placa : String ; Pago : Boolean ; } datatype InformacaoEntrada { attributes : ID : String ; Placa : String ; HoraEntrada : DataType ; } datatype VagaData { attributes : Estado : EstadoVaga ; ID : String ; Tipo : TipoVaga ; } datatype DisplayUnityData { attributes : VagaInfo : VagaData ; } datatype DisplayData { attributes : VagaSimples : Int ; VagaCoberta : Int ; VagaPreferencial : Int ; VagaAcessivel : Int ; } datatype LeitorComponentData { attributes : Placa : String ; Hora : DataType ; } datatype PaymentComponentData { attributes : Placa : String ; TempoPermanencia : SegundosDataType ; TipoPagamento : TipoPagamento ; } datatype OutPaymentComponentData { attributes : Placa : String ; Preco : ReaisType ; Pago : Boolean ; } datatype ExitUnityControl { attributes : Placa : String ; Pago : Boolean ; } datatype LeituraPlaca { attributes : Placa : Imagem ; } value type Imagem { } datatype InformacoesPagamento { attributes : Valor : ReaisType ; Infos : InformacaoEntrada ; } } Requirement RFControledeVagasDisponiveis ( 2 ) { text = "" satisfied by SPSystemComponents.DisplayVagasGeral ; derive RFControleDeEntradaeSaida ; Requirement RFVagasDoSetor ( 2.1 ) { satisfied by SPSystemComponents.DisplayVagasSetor ; } } Requirement RFEquipamentosdeEntradaeSaida ( 7 ) { text = ^text satisfied by SPSystemComponents.Cancela ; derive RFControleDeEntradaeSaida ; } Requirement RFEmergencia ( 6 ) { text = ^text satisfied by SPSystemComponents.UnidadeControleAcesso ; derive RFControleDeEntradaeSaida ; } Requirement RFControledeAcesso ( 8 ) { satisfied by SPSystemComponents.SPSystem ; } Requirement RFControleDeEntradaeSaida ( 1 ) { text = ^text satisfied by SPSystemComponents.UnidadeControleAcesso ; Requirement RFControleDeSaida ( 1.1 ) { text = ^text satisfied by SPSystemComponents.ReceptorTicket ; } Requirement RFControleDeEntrada ( 1.2 ) { text = ^text satisfied by SPSystemComponents.EmissorTicket ; } } Requirement RFIdentificacaoEAutorizacaoDeVeiculos ( 3 ) { derive RFControleDeEntradaeSaida ; Requirement RFIdentificacao ( 3.2 ) { satisfied by SPSystemComponents.DetectorPlaca ; } Requirement RFAutorizacao ( 3.1 ) { satisfied by SPSystemComponents.ReceptorTicket ; } }  Requirement RFCalculoAutomatico ( 5 ) { satisfied by SPSystemComponents.UnidadePagamento ; derive RFTerminaisdePagamento ; } package SPSystemComponents { import SPSystemConnectors ; import SysADL.types ; import SPSystemPorts ;
	component def UnidadeControleCentral { ports :  configuration { components :    UnidadePagamento : UnidadePagamento { using ports : IT_OUT_CTRL : InfoTicket_OUT ; IV_CTRL_IN : InfoValor_IN ; IS_CTRL_OUT : InfoSaida_OUT ; } UnidadeControleAcesso : UnidadeControleAcesso { using ports : DE_OUT_CTRL_G : DadosEntrada_OUT ; IS_IN_CTRL_G : InfoSaida_IN ; InfoSaida_G : InfoTicket_OUT ; } UnidadeControleDisplay : UnidadeControleDisplay ; GerenciamentoCentral : GerenciamentoCentral { using ports : DE_GC_IN : DadosEntrada_IN ; IV_GC_OUT : InfoValor_OUT ; IS_GC_OUT : InfoSaida_OUT ; IS_GC_IN : InfoSaida_IN ; } BancoDeDados : BancoDeDados { using ports : DE_BD_IN : DadosEntrada_IN ; DE_BD_OUT : DadosEntrada_OUT ; } } }
	component def UnidadeControleDisplay { ports :  configuration { components :  DisplayVagasGeral : DisplayVagasGeral { using ports : EV_OUT_CTRL_GRL : EstadoVagas_OUT ; } } }
	component def UnidadePagamento { ports : IT_OUT_CTRL : InfoTicket_OUT ; IV_CTRL_IN : InfoValor_IN ; IS_CTRL_OUT : InfoSaida_OUT ; configuration { components :   PlataformaPagamento : PlataformaPagamento { using ports : IT_PAG_IN : InfoTicket_IN ; IT_PAG_OUT : InfoTicket_OUT ; IV_PAG_IN : InfoValor_IN ; IS_PAG_OUT : InfoSaida_OUT ; } TotemPagamento : TotemPagamento { using ports : IT_TOT_IN : InfoTicket_IN ; IT_TOT_OUT : InfoTicket_OUT ; IV_TOT_IN : InfoValor_IN ; IS_TOT_OUT : InfoSaida_OUT ; } GerenciamentoPagamento : GerenciamentoPagamento { using ports : IT_G_IN : InfoTicket_IN ; IT_OUT_G : InfoTicket_OUT ; IV_IN : InfoValor_IN ; IS_OUT : InfoSaida_OUT ; IV_OUT : InfoValor_OUT ; IS_G_IN : InfoSaida_IN ; } } }
	component def UnidadeControleAcesso { ports : DE_OUT_CTRL_G : DadosEntrada_OUT ; IS_IN_CTRL_G : InfoSaida_IN ; InfoSaida_G : InfoTicket_OUT ;   configuration { components : UnidadeControleEntrada : UnidadeControleEntrada ; UnidadeControleSaida : UnidadeControleSaida ; } } boundary
	component def SensorPresenca { ports :  SV_IN : SensorVaga_IN ; SV_OUT : SensorVaga_OUT ; } boundary
	component def TotemPagamento { ports :   IT_TOT_IN : InfoTicket_IN ; IT_TOT_OUT : InfoTicket_OUT ; IV_TOT_IN : InfoValor_IN ; IS_TOT_OUT : InfoSaida_OUT ; } boundary
	component def Cancela { ports :  PC : PortaCancela ; }
	component def DisplayVagasGeral { ports : EV_OUT_CTRL_GRL : EstadoVagas_OUT ; configuration { components :  GerenciamentoDisplayGeral : GerenciamentoDisplayGeral { using ports : EV_IN_CTRL : EstadoVaga_IN ; EV_OUT_CTRL_G : EstadoVagas_OUT ; } DisplayVagasSetor : DisplayVagasSetor { using ports : EV_OUT_CTRL : EstadoVagas_OUT ; } } }
	component def DisplayVagasSetor { ports : EV_OUT_CTRL : EstadoVagas_OUT ; configuration { components :  GerenciamentoDisplaySetor : GerenciamentoDisplaySetor { using ports : EV_IN : EstadoVaga_IN ; EV_OUT : EstadoVagas_OUT ; } SensorPresenca : SensorPresenca { using ports : SV_IN : SensorVaga_IN ; SV_OUT : SensorVaga_OUT ; } } } boundary
	component def DetectorPlaca { ports :  EntradaLeitor : LeitorPlaca_IN ; SaidaLeitor : LeitorPlaca_OUT ; SLP_IN : SolicitacaoLeituraPlaca_IN ; } boundary
	component def EmissorTicket { ports : ST_IN : SolicitacaoTicketIN ; ST_OUT : SolicitacaoTicketOUT ; TE : TicketEmitido ; DE_IN : DadosEntrada_IN ; } boundary
	component def ReceptorTicket { ports : IT_OUT : InfoTicket_OUT ; } boundary
	component def PlataformaPagamento { ports : IT_PAG_IN : InfoTicket_IN ; IT_PAG_OUT : InfoTicket_OUT ; IV_PAG_IN : InfoValor_IN ; IS_PAG_OUT : InfoSaida_OUT ; } component def SPSystem { configuration { components :           UnidadeControleCentral : UnidadeControleCentral { using ports :  } } }
	component def UnidadeControleSaida { ports : IT_G_OUT : InfoTicket_OUT ; IS_IN_CTRL : InfoSaida_IN ;   configuration { components :    ControleSaida : ControleSaida { using ports : CC_saida : CmdCancela ; IT_IN : InfoTicket_IN ; IS_IN : InfoSaida_IN ; IT_OUT_CTRL : InfoTicket_OUT ; } DetectorPlaca : DetectorPlaca { using ports : EntradaLeitor : LeitorPlaca_IN ; SaidaLeitor : LeitorPlaca_OUT ; SLP_IN : SolicitacaoLeituraPlaca_IN ; } Cancela : Cancela { using ports : PC : PortaCancela ; } ReceptorTicket : ReceptorTicket { using ports : IT_OUT : InfoTicket_OUT ; } } }
	component def UnidadeControleEntrada { ports : DE_OUT_CTRL : DadosEntrada_OUT ; configuration { components :    ControleEntrada : ControleEntrada { using ports : EntradaImagem : ImagemDoSensor_IN ; SaidaDadosEntrada : DadosEntrada_OUT ; ST_IN_CTRL : SolicitacaoTicketIN ; SLP_OUT : SolicitacaoLeituraPlaca_OUT ; CC : CmdCancela ; } Cancela : Cancela { using ports : PC : PortaCancela ; } DetectorPlaca : DetectorPlaca { using ports : EntradaLeitor : LeitorPlaca_IN ; SaidaLeitor : LeitorPlaca_OUT ; SLP_IN : SolicitacaoLeituraPlaca_IN ; } EmissorTicket : EmissorTicket { using ports : ST_IN : SolicitacaoTicketIN ; ST_OUT : SolicitacaoTicketOUT ; TE : TicketEmitido ; DE_IN : DadosEntrada_IN ; } } } component def GerenciamentoCentral { ports : DE_GC_IN : DadosEntrada_IN ; IV_GC_OUT : InfoValor_OUT ; IS_GC_OUT : InfoSaida_OUT ; IS_GC_IN : InfoSaida_IN ; }
	component def GerenciamentoPagamento { ports : IT_G_IN : InfoTicket_IN ; IT_OUT_G : InfoTicket_OUT ; IV_IN : InfoValor_IN ; IS_OUT : InfoSaida_OUT ; IV_OUT : InfoValor_OUT ; IS_G_IN : InfoSaida_IN ; }
	component def ControleEntrada { ports : IS_IN : ImagemDoSensor_IN ; DE_OUT : DadosEntrada_OUT ; ST_IN_CTRL : SolicitacaoTicketIN ; SLP_OUT : SolicitacaoLeituraPlaca_OUT ; CC_entrada : CmdCancela ; }
	component def ControleSaida { ports : CC_saida : CmdCancela ; IT_IN : InfoTicket_IN ; IS_IN : InfoSaida_IN ; IT_OUT_CTRL : InfoTicket_OUT ; }
	component def GerenciamentoDisplayGeral { ports : EV_IN_CTRL : EstadoVaga_IN ; EV_OUT_CTRL_G : EstadoVagas_OUT ; }
	component def GerenciamentoDisplaySetor { ports : EV_IN : EstadoVaga_IN ; EV_OUT : EstadoVagas_OUT ; }
	component def BancoDeDados { ports : DE_BD_IN : DadosEntrada_IN ; DE_BD_OUT : DadosEntrada_OUT ; } } package SPSystemConnectors { import SPSystemPorts ; } package SPSystemPorts { import SysADL.types ;                  port def LeitorPlaca_IN { flow in LeituraPlaca }  port def LeitorPlaca_OUT { flow out LeituraPlaca }  port def DadosEntrada_OUT { flow out InformacaoEntrada port def SolicitacaoLeituraPlaca { flow in Boolean port def SolicitacaoTicketOUT { flow out Boolean } } }  port def ImagemDoSensor_IN { flow in LeituraPlaca }  port def SolicitacaoTicketIN { flow in Boolean }  port def SolicitacaoTicketOUT { flow out Boolean port def SolicitacaoTicket { flow out Boolean } }  port def TicketEmitido { flow out Boolean }  port def PortaCancela { flow in ComandoCancela }  port def SolicitacaoLeituraPlaca_OUT { flow out Boolean port def SolicitacaoTicketOUT { flow out Boolean } }  port def SolicitacaoLeituraPlaca_IN { flow in Boolean port def SolicitacaoTicketOUT { flow out Boolean } }  port def CmdCancela { flow out ComandoCancela }  port def DadosEntrada_IN { flow in InformacaoEntrada }  port def InfoTicket_IN { flow in String port def SaidaDadosEntrada { flow out InformacaoEntrada } }  port def InfoTicket_OUT { flow out String }  port def InfoSaida_IN { flow in InformacaoSaida }  port def InfoSaida_OUT { flow out InformacaoSaida }  port def SensorVaga_OUT { flow out EstadoVaga } port def SensorVaga_IN { flow in EstadoVaga } port def EstadoVaga_IN { flow in EstadoVaga } port def EstadoVagas_OUT { flow out EstadoVaga } port def InfoValor_IN { flow in InformacoesPagamento } port def InfoValor_OUT { flow in InformacoesPagamento } } Requirement RFTerminaisdePagamento ( 4 ) { satisfied by SPSystemComponents.UnidadePagamento ; derive RFIdentificacaoEAutorizacaoDeVeiculos ; } Requirement RNFSuportarDiferentesCapacidades ( 10 ) { satisfied by SPSystemComponents.UnidadeControleAcesso ; } Requirement RNFFormasPagamento ( 11 ) { satisfied by SPSystemComponents.PlataformaPagamento , SPSystemComponents.TotemPagamento ; } Requirement RNFIntegracaoPagamento ( 12 ) { satisfied by SPSystemComponents.UnidadePagamento ; } Requirement RNFAtualizacao ( 13 ) { satisfied by SPSystemComponents.SPSystem ; } Requirement RNFMinFila ( 14 ) { satisfied by SPSystemComponents.DetectorPlaca ; } Requirement RNFFuncionamento24x7 ( 15 ) { satisfied by SPSystemComponents.SensorPresenca , SPSystemComponents.DisplayVagasGeral , SPSystemComponents.UnidadeControleAcesso ; } Requirement RNFSegurancaDados ( 16 ) { satisfied by SPSystemComponents.SPSystem ; } Requirement RNFToleranciaFalhas ( 17 ) { satisfied by SPSystemComponents.SPSystem ; }
